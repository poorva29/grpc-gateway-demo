// Code generated by protoc-gen-validate
// source: demo/grpc/user_service.proto
// DO NOT EDIT!!!

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ProfileCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProfileCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFirstName()) < 1 {
		return ProfileCreateRequestValidationError{
			Field:  "FirstName",
			Reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetLastName()) < 1 {
		return ProfileCreateRequestValidationError{
			Field:  "LastName",
			Reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ProfileCreateRequestValidationError is the validation error returned by
// ProfileCreateRequest.Validate if the designated constraints aren't met.
type ProfileCreateRequestValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e ProfileCreateRequestValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileCreateRequest.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = ProfileCreateRequestValidationError{}

// Validate checks the field values on ProfileCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProfileCreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ProfileCreateResponseValidationError is the validation error returned by
// ProfileCreateResponse.Validate if the designated constraints aren't met.
type ProfileCreateResponseValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e ProfileCreateResponseValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileCreateResponse.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = ProfileCreateResponseValidationError{}
